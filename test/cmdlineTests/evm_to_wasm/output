
======= evm_to_wasm/input.yul (Ewasm) =======

Pretty printed source:
object "object" {
    code { { sstore(0, 1) } }
}


==========================

Translated source:
object "object" {
    code {
        function main()
        {
            let _1 := 0xff00
            let hi := i64.shl(i64.or(i64.shl(i64.or(i64.and(i64.shl(0, 8), _1), i64.and(i64.shr_u(0, 8), 0xff)), 16), bswap16(i64.shr_u(0, 16))), 32)
            let y := i64.or(hi, bswap32(i64.shr_u(0, 32)))
            i64.store(0:i32, y)
            i64.store(i32.add(0:i32, 8:i32), y)
            i64.store(i32.add(0:i32, 16:i32), y)
            i64.store(i32.add(0:i32, 24:i32), y)
            i64.store(32:i32, y)
            i64.store(i32.add(32:i32, 8:i32), y)
            i64.store(i32.add(32:i32, 16:i32), y)
            let hi_1 := i64.shl(i64.or(i64.shl(i64.or(i64.and(i64.shl(1, 8), _1), i64.and(i64.shr_u(1, 8), 0xff)), 16), bswap16(i64.shr_u(1, 16))), 32)
            i64.store(i32.add(32:i32, 24:i32), i64.or(hi_1, bswap32(i64.shr_u(1, 32))))
            eth.storageStore(0:i32, 32:i32)
        }
        function bswap16(x) -> y
        {
            y := i64.or(i64.and(i64.shl(x, 8), 0xff00), i64.and(i64.shr_u(x, 8), 0xff))
        }
        function bswap32(x) -> y
        {
            let hi := i64.shl(bswap16(x), 16)
            y := i64.or(hi, bswap16(i64.shr_u(x, 16)))
        }
    }
}


Binary representation:
0061736d01000000010e0360000060017e017e60027f7f0002190108657468657265756d0c73746f7261676553746f726500020304030001010503010001060100071102066d656d6f72790200046d61696e00010af70103b50101047e02404280fe0321004200420886200083420042088842ff0183844210864200421088100284422086210120014200422088100384210241002002370000410041086a2002370000410041106a2002370000410041186a200237000041202002370000412041086a2002370000412041106a20023700004201420886200083420142088842ff01838442108642014210881002844220862103412041186a200342014220881003843700004100412010000b0b1f01017e024020004208864280fe0383200042088842ff01838421010b20010b1e01027e02402000100242108621022002200042108810028421010b20010b

Text representation:
(module
    (import "ethereum" "storageStore" (func $eth.storageStore (param i32 i32)))
    (memory $memory (export "memory") 1)
    (export "main" (func $main))

(func $main
    (local $_1 i64)
    (local $hi i64)
    (local $y i64)
    (local $hi_1 i64)
    (block $label_
        (local.set $_1 (i64.const 65280))
        (local.set $hi (i64.shl (i64.or (i64.shl (i64.or (i64.and (i64.shl (i64.const 0) (i64.const 8)) (local.get $_1)) (i64.and (i64.shr_u (i64.const 0) (i64.const 8)) (i64.const 255))) (i64.const 16)) (call $bswap16 (i64.shr_u (i64.const 0) (i64.const 16)))) (i64.const 32)))
        (local.set $y (i64.or (local.get $hi) (call $bswap32 (i64.shr_u (i64.const 0) (i64.const 32)))))
        (i64.store (i32.const 0) (local.get $y))
        (i64.store (i32.add (i32.const 0) (i32.const 8)) (local.get $y))
        (i64.store (i32.add (i32.const 0) (i32.const 16)) (local.get $y))
        (i64.store (i32.add (i32.const 0) (i32.const 24)) (local.get $y))
        (i64.store (i32.const 32) (local.get $y))
        (i64.store (i32.add (i32.const 32) (i32.const 8)) (local.get $y))
        (i64.store (i32.add (i32.const 32) (i32.const 16)) (local.get $y))
        (local.set $hi_1 (i64.shl (i64.or (i64.shl (i64.or (i64.and (i64.shl (i64.const 1) (i64.const 8)) (local.get $_1)) (i64.and (i64.shr_u (i64.const 1) (i64.const 8)) (i64.const 255))) (i64.const 16)) (call $bswap16 (i64.shr_u (i64.const 1) (i64.const 16)))) (i64.const 32)))
        (i64.store (i32.add (i32.const 32) (i32.const 24)) (i64.or (local.get $hi_1) (call $bswap32 (i64.shr_u (i64.const 1) (i64.const 32)))))
        (call $eth.storageStore (i32.const 0) (i32.const 32))
    )
)

(func $bswap16
    (param $x i64)
    (result i64)
    (local $y i64)
    (block $label__1
        (local.set $y (i64.or (i64.and (i64.shl (local.get $x) (i64.const 8)) (i64.const 65280)) (i64.and (i64.shr_u (local.get $x) (i64.const 8)) (i64.const 255))))

    )
    (local.get $y)
)

(func $bswap32
    (param $x i64)
    (result i64)
    (local $y i64)
    (local $hi i64)
    (block $label__2
        (local.set $hi (i64.shl (call $bswap16 (local.get $x)) (i64.const 16)))
        (local.set $y (i64.or (local.get $hi) (call $bswap16 (i64.shr_u (local.get $x) (i64.const 16)))))

    )
    (local.get $y)
)

)
